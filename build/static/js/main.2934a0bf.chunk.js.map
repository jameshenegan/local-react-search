{"version":3,"sources":["QueryBuilder.js","QueryParser.js","getAllSearchResults.js","SearchResults.jsx","App.js","index.js"],"names":["QueryBuilder","inputSearchString","filters","pageNumber","numResults","this","querySearchString","length","toLowerCase","split","join","queryFilterString","filteredKeys","Object","keys","filter","key","searchQuery","queryFromSearchString","getQueryFromSearchString","queryFromFilters","getQueryFromFilters","queryItems","push","QueryParser","splitSearchQuery","keywordsString","filtersString","term","substring","keywordsUnfiltered","filtersUnfiltered","keywords","keyword","getAllSearchResults","qp","filteredData","data","datum","includes","source","label","sheet","name","SearchResults","props","map","i","App","useState","searchString","setSearchString","checkBox1Value","setCheckBox1Value","checkBox2Value","setCheckBox2Value","setSearchQuery","useEffect","qb","Form","Derived","buildQuery","type","placeholder","onInput","event","target","value","id","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2934a0bf.chunk.js","sourcesContent":["export default class QueryBuilder {\n  constructor(inputSearchString, filters, pageNumber, numResults) {\n    this.inputSearchString = inputSearchString;\n    this.filters = filters;\n    this.pageNumber = pageNumber;\n    this.numResults = numResults;\n  }\n\n  getQueryFromSearchString() {\n    let querySearchString = \"\";\n\n    if (this.inputSearchString.length > 0) {\n      const inputSearchList = this.inputSearchString.toLowerCase().split(\" \");\n      querySearchString += \"keywords=\";\n      querySearchString += inputSearchList.join(\"+\");\n    }\n    return querySearchString;\n  }\n\n  getQueryFromFilters() {\n    let queryFilterString = \"\";\n    let trues = [];\n\n    const keys = Object.keys(this.filters);\n    const filteredKeys = keys.filter((key) => this.filters[key]);\n\n    if (filteredKeys.length > 0) {\n      queryFilterString += \"filters=\";\n      queryFilterString += filteredKeys.join(\"+\");\n    }\n\n    return queryFilterString;\n  }\n\n  buildQuery() {\n    let searchQuery = \"\";\n\n    const queryFromSearchString = this.getQueryFromSearchString();\n    const queryFromFilters = this.getQueryFromFilters();\n\n    const queryItems = [];\n    if (queryFromSearchString.length > 0) {\n      queryItems.push(queryFromSearchString);\n    }\n\n    if (queryFromFilters.length > 0) {\n      queryItems.push(queryFromFilters);\n    }\n\n    if (queryItems.length > 0) {\n      searchQuery += queryItems.join(\"&\");\n    }\n\n    return searchQuery;\n  }\n}\n","export default class QueryParser {\n  constructor(searchQuery) {\n    // Split something like 'keywords=a+b&filters=c+d'\n    // into something like ['keywords=a+b', 'filters=c+d']\n    const splitSearchQuery = searchQuery.split(\"&\");\n\n    // Identify the keyword string ('keywords=a+b')\n    // and the filters string ('filters=c+d')\n    let keywordsString = \"\";\n    let filtersString = \"\";\n\n    for (const term of splitSearchQuery) {\n      if (term.length > 0) {\n        if (term.substring(0, 1) == \"k\") {\n          keywordsString = term;\n        }\n        if (term.substring(0, 1) == \"f\") {\n          filtersString = term;\n        }\n      }\n    }\n\n    // Go from 'keywords=a+b' to 'a+b\n    if (keywordsString.length > 0) {\n      keywordsString = keywordsString.split(\"=\")[1];\n    }\n    // Go from 'filters=c+d' to 'c+d'\n    if (filtersString.length > 0) {\n      filtersString = filtersString.split(\"=\")[1];\n    }\n\n    // Go from 'a+b' to ['a','b']\n    const keywordsUnfiltered = keywordsString.split(\"+\");\n    // Go from 'c+d' to ['c','d']\n    const filtersUnfiltered = filtersString.split(\"+\");\n\n    // Go from ['a','b',''] to ['a','b']\n    const keywords = keywordsUnfiltered.filter((keyword) => keyword !== \"\");\n    const filters = filtersUnfiltered.filter((filter) => filter !== \"\");\n\n    this.keywords = keywords;\n    this.filters = filters;\n  }\n}\n","import QueryParser from \"./QueryParser\";\nimport data from \"./targetVariables.json\";\n\nfunction getAllSearchResults(searchQuery) {\n  const qp = new QueryParser(searchQuery);\n\n  const filters = qp.filters;\n  const keywords = qp.keywords;\n\n  let filteredData = [];\n\n  if (filters.length > 0) {\n    filteredData = data.filter((datum) => filters.includes(datum.source));\n  } else {\n    filteredData = data;\n  }\n  for (const keyword of keywords) {\n    filteredData = filteredData.filter(\n      (datum) =>\n        datum.label.toLowerCase().includes(keyword) ||\n        datum.sheet.toLowerCase().includes(keyword) ||\n        datum.source.toLowerCase().includes(keyword) ||\n        datum.name.toLowerCase().includes(keyword)\n    );\n  }\n  return filteredData;\n}\n\nexport default getAllSearchResults;\n","import { Divider, Section } from \"react-materialize\";\nimport getAllSearchResults from \"./getAllSearchResults\";\nfunction SearchResults(props) {\n  const { searchQuery } = props;\n\n  const filteredData = getAllSearchResults(searchQuery);\n\n  return (\n    <div>\n      <p>Showing {filteredData.length} results</p>\n      {filteredData.map((datum, i) => (\n        <div key={i}>\n          <Divider></Divider>\n          <Section>\n            <h4>{datum.name}</h4>\n            <ul>\n              <li>\n                <b>Sheet</b>: {datum.sheet}\n              </li>\n              <li>\n                <b>Name</b>: {datum.name}\n              </li>\n              <li>\n                <b>Label</b>: {datum.label}\n              </li>\n              <li>\n                <b>Source</b>: {datum.source}\n              </li>\n            </ul>\n          </Section>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default SearchResults;\n","import { useState, useEffect } from \"react\";\nimport { Checkbox, Row, Col, Container } from \"react-materialize\";\nimport QueryBuilder from \"./QueryBuilder\";\nimport SearchResults from \"./SearchResults\";\nfunction App() {\n  const [searchString, setSearchString] = useState(\"\");\n\n  const handleSearchChange = (event) => {\n    setSearchString(event.target.value);\n  };\n\n  const [checkBox1Value, setCheckBox1Value] = useState(false);\n  const [checkBox2Value, setCheckBox2Value] = useState(false);\n\n  const handleCheckBox1Change = (event) => {\n    setCheckBox1Value(event.target.checked);\n  };\n\n  const handleCheckBox2Change = (event) => {\n    setCheckBox2Value(event.target.checked);\n  };\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    // translate the checkboxes to the values that appear in the search query\n    const filters = {\n      Form: checkBox1Value,\n      Derived: checkBox2Value,\n    };\n\n    const qb = new QueryBuilder(searchString, filters);\n\n    setSearchQuery(qb.buildQuery());\n  }, [searchString, checkBox1Value, checkBox2Value]);\n\n  return (\n    <Container>\n      <Row>\n        <h3>Metadata Explorer</h3>\n      </Row>\n\n      <Row>\n        <input\n          type=\"text\"\n          placeholder=\"Input search query here...\"\n          onInput={handleSearchChange}\n        />\n      </Row>\n      <Row>\n        <Col>Checkboxes:</Col>\n        <Col>\n          <Checkbox\n            id=\"CheckBox1\"\n            label=\"Form\"\n            onInput={handleCheckBox1Change}\n          />\n        </Col>\n        <Col>\n          {\" \"}\n          <Checkbox\n            id=\"CheckBox2\"\n            label=\"Derived\"\n            onInput={handleCheckBox2Change}\n          />\n        </Col>\n      </Row>\n\n      <Row>\n        <code>GET http://my.api/resources/{searchQuery}</code>\n      </Row>\n      <Row>\n        <SearchResults searchQuery={searchQuery}></SearchResults>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n"],"sourceRoot":""}